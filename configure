#!/bin/sh

#    Raydium - CQFD Corp.
#    http://raydium.org/
#    License: GPL - GNU General Public License, see "gpl.txt" file.

# This script will configure Raydium and download, configure and build
# dependencies if needed. See --help argument.

# build file
# $1 is file content
# $2 is gcc's options
test_build()
{
echo "$1" > configure.c
gcc -g configure.c -Wall -o configure.bin $2 2> configure.log

if [ "$?" != "0" ]; then
    echo " build: failed"
    return 1
fi

./configure.bin > configure.log
ret=$?

if [ "$ret" = "0" ]; then
    echo " ok"
fi

if [ "$ret" != "0" ]; then
    echo " run: failed"
fi

return $ret
}


# $1 is last returned code
# $2 is error message
exit_if_error()
{
if [ "$1" != "0" ]; then
    echo "$2"
    exit 1
fi
return 0
}

usage_print()
{
echo "Quick configure script for Raydium 3D Game Engine"
echo "  --help               this text"
echo "  --install-ode        ODE local auto-install"
echo "  --install-php        PHP 4 local auto-install"
echo "  --ode-cvs            Use ODE CVS version"
echo "  --disable-x          Disable X/GL/GLU test (server)"
exit 0
}

ode_install()
{
echo "ODE Auto local installation ..."
if [ -d "ode" ]; then
    echo "ODE (partial ?) install detected, abort (ode/)"
    exit 1
fi

# download

if [ $ode_cvs = "true" ]; then
    echo "Downloading from CVS ..."
    cvs -d:pserver:anonymous:@cvs.sourceforge.net:/cvsroot/opende login
    exit_if_error "$?" "No cvs client installed ?"
    cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/opende co -r UNSTABLE -P ode
    exit_if_error "$?" "CVS server error ? Try manual install (http://ode.org)"
else
    echo "Downloading 'stable CVS' version from Raydium website ..."
    if [ -f "ode.tar.gz" ]; then
        rm -f ode.tar.gz
    fi
    wget -O ode.tar.gz http://raydium.org/data/stable_mirrors/ode.tar.gz
    exit_if_error "$?" "Error downloading."

    # uncompress
    echo "Uncompressing ..."
    tar xzf ode.tar.gz
    exit_if_error "$?" "tar not found, or corrupted archive"
fi

# configure (step 1)
echo '
# Raydium ODE autoconfig
PLATFORM=unix-gcc
PRECISION=SINGLE
BUILD=release
WINDOWS16=0
OPCODE_DIRECTORY=OPCODE
' > ode/config/user-settings

# configure (step 2)
echo "Configuring ... (ignore warnings)"
cd ode
make configure > ../configure.log
ret=$?
cd -
exit_if_error "$?" "ODE configuration failed (see configure.log)"

echo '
#ifndef dEpsilon
#define dEpsilon FLT_EPSILON
#endif
' >> ode/include/ode/config.h

# build
echo "Building ... (ignore warnings)"
cd ode
make > ../configure.log
ret=$?
cd -
exit_if_error "$?" "ODE Build failed (see configure.log)"
echo "- ODE seems ready -"
}

php_install()
{
echo "PHP4 Auto local installation ..."
if [ -d "php" ]; then
    echo "PHP (partial ?) install detected, abort (php/)"
    exit 1
fi

# download
echo "Downloading latest PHP4 ..."
wget -O php4-last.tar.gz http://snaps.php.net/php4-STABLE-latest.tar.gz
exit_if_error "$?" "wget not found, or network error"

# uncompress
echo "Uncompressing ..."
tar xzf php4-last.tar.gz
exit_if_error "$?" "tar not found, or corrupted archive"

# rename
php=`ls -dt php4-STABLE-*/`
echo "Renaming $php to php/ ..."
mv "$php" "php"
exit_if_error "$?" "Is this script up to date ?"

# configure
echo "Configuring ..."
cd php
./configure --enable-embed=static --with-zlib --enable-ftp --enable-static=zlib > ../configure.log
ret=$?
cd -
exit_if_error "$ret" "PHP configure failed (missing libs ?). See configure.log"

# compile
echo "Building ... (ignore warnings)"
cd php
make > ../configure.log
ret=$?
cd -
exit_if_error "$ret" "PHP building failed, see configure.log"

# deleting
echo "Deleting tar.gz ..."
rm -f php4-last.tar.gz

echo "- PHP4 seems ready -"
}


####### Main

for i in "$@"; do
    if [ $i = "--help" ]; then
    usage_print
    fi
done

ode_cvs="false"
for i in "$@"; do
    if [ $i = "--ode-cvs" ]; then
    ode_cvs="true"
    fi
done


for i in "$@"; do
    if [ $i = "--install-ode" ]; then
    ode_install
    fi
done

for i in "$@"; do
    if [ $i = "--install-php" ]; then
    php_install
    fi
done

# Test compiler
echo -n "* GCC :"
file='int main(void) { return 0; }'
test_build "$file" ""
exit_if_error "$?" "GNU C Compiler (GCC) is missing"

# Test OpenGL
echo -n "* OpenGL lib :"

file='#include <GL/gl.h>
int main(void) { if(0) glVertex3f(0,0,0); return 0; }'
test_build "$file" "-L/usr/X11R6/lib/ -lGL"
exit_if_error "$?" "You must install opengl-devel package"


disable_x="no";
for i in "$@"; do
    if [ $i = "--disable-x" ]; then
    disable_x="yes";
    fi
done

# Test GLU
echo -n "* GLU lib :"

file='#include <GL/gl.h>
#include <GL/glu.h>
int main(void) { return 0; }'
test_build "$file" "-L/usr/X11R6/lib/ -lGL -lGLU"
exit_if_error "$?" "You must install glu-devel package"

# Test GLUT
#echo -n "* GLUT lib :"

#file='#include <GL/glut.h>
#int main(void) { gluGetString(GLU_VERSION); return 0; }'
#test_build "$file" "-L/usr/X11R6/lib/ -lGL -lGLU -lglut"
#exit_if_error "$?" "You must install glut-devel package"


# Full GL/GLU test, looking for hardware accel
echo -n "* GL/GLU and hardware support :"

if [ $disable_x = "no" ]; then
file='
// define a dummy Raydium background for myglut :
#define RAYDIUM_RENDERING_WINDOW      	    	0
#define RAYDIUM_RENDERING_FULLSCREEN  	     	1
#define RAYDIUM_RENDERING_NONE  	     	2
#define DONT_INCLUDE_HEADERS
#define raydium_log printf
signed char    raydium_key[256];
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "raydium/myglut/myglut.c"
int main(int argc, char **argv) { 
char *r;
glutInit(&argc,argv);
myglutCreateWindow(320,240,RAYDIUM_RENDERING_WINDOW,"GL test");

r=glGetString(GL_RENDERER);
if(!strcmp(r,"Mesa GLX Indirect"))
    {
    fprintf(stderr,"WARNING ! Mesa Software renderer detected !");
    fprintf(stdout,"WARNING ! Mesa Software renderer detected !");
    }
return 0; }
'
test_build "$file" "-L/usr/X11R6/lib/ -lGL -lGLU"
exit_if_error "$?" "Full GL test failed, see configure.log"
else
echo " DISABLED";
fi

# OpenAL
echo -n "* OpenAL :"
file="
#include <AL/al.h>
#include <AL/alc.h>
#include <AL/alut.h>
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
int main(int argc, char **argv) {
ALCdevice *dev;
const ALubyte *initstr=(const ALubyte *) \"'( ( devices '( native null ) ) )\";
dev=alcOpenDevice(initstr);
sleep(1);
alcCloseDevice(dev);
return 0; }"
test_build "$file" "-lopenal"
exit_if_error "$?" "openal-devel is required. Official CVS may be a good idea"

# OpenAL 1.1
echo -n "* OpenAL 1.1 and ALut:"
file="
#include <AL/al.h>
#include <AL/alc.h>
#include <AL/alut.h>
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
int main(int argc, char **argv) {
ALCdevice *dev;
const ALubyte *initstr=(const ALubyte *) \"'( ( devices '( native null ) ) )\";
dev=alcOpenDevice(initstr);
sleep(1);
#ifndef ALUT_API_MAJOR_VERSION
#error ALUT for OpenAL 1.1 is required
#endif
alcCloseDevice(dev);
return 0; }"
test_build "$file" "-lopenal -lalut"
#exit_if_error "$?" ""
if [ "$?" != "0" ]; then
    echo "Cannot find OpenAL 1.1 and ALUT. You can try to remove -lalut from Makefile and/or *comp*sh scripts, but Raydium with OpenAL 1.0 is not supported."
fi


# OGG/Vorbis
echo -n "* OGG/Vorbis :"
file='
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <vorbis/codec.h>
#include <vorbis/vorbisfile.h>
int main(void){
FILE *fp;
OggVorbis_File vf;
fp=fopen(".","r");
if(ov_open(fp, &vf, NULL, 0) < 0) { exit(0); }
// should never hit this !
ov_clear(&vf);    
return(0);
}'
# -logg seems useless ...
test_build "$file" "-lvorbis -lvorbisfile -logg"
exit_if_error "$?" "ogg and vorbis devels are required (libogg,libvorbis and libvorbisfile)"


# ODE
echo -n "* ODE (local) :"
if [ -f "ode/lib/libode.a" ]; then
    # found (0 = ok)
    echo " ok"
    ret=0
else
    echo " not found"
    ret=1
fi
exit_if_error "$ret" "ODE is not installed (ODE must be local). Try $0 --install-ode !"


# PHP
echo -n "* PHP 4 (local) :"
if [ -f "php/libs/libphp4.a" ]; then
    # found (0 = ok)
    echo " ok"
    ret=0
else
    echo " not found"
    ret=1
fi
exit_if_error "$ret" "PHP 4 is not installed (PHP must be local). Try $0 --install-php !"


# libjpeg
echo -n "* libjpeg :"
file='
#include <stdio.h>
#include <jpeglib.h>

int main(void)
{
struct jpeg_decompress_struct cinfo;
struct jpeg_error_mgr jerr;
JSAMPARRAY buffer;
int row_stride;
long count;

cinfo.err=jpeg_std_error(&jerr);
jpeg_create_decompress(&cinfo);
jpeg_destroy_decompress(&cinfo);

return 0;
}
'
test_build "$file" "-ljpeg"
exit_if_error "$?" "libjpeg-devel not available."



##### End of tests

echo "- Build system seems ready -"
echo "- Use \"make\" to build Raydium, and try: \"./odyncomp.sh test6.c\""
echo "- You can also use \"./ocomp.sh test6.c\" for a quick direct test"
